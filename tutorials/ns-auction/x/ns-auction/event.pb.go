// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cosmos/ns_auction/v1/event.proto

package ns_auction

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// EventReserve is emitted on Msg/Reserve
type EventReserve struct {
	// name is the human readable reserved address
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// owner is the bech32 address of the name's owner
	Owner string `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	// resolve is the bech32 address the name resolves to
	Resolve string `protobuf:"bytes,3,opt,name=resolve,proto3" json:"resolve,omitempty"`
	// receiver is the receiver address of nft
	Amount github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,4,rep,name=amount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"amount"`
}

func (m *EventReserve) Reset()         { *m = EventReserve{} }
func (m *EventReserve) String() string { return proto.CompactTextString(m) }
func (*EventReserve) ProtoMessage()    {}
func (*EventReserve) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f524370d84f673a, []int{0}
}
func (m *EventReserve) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventReserve) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventReserve.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventReserve) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventReserve.Merge(m, src)
}
func (m *EventReserve) XXX_Size() int {
	return m.Size()
}
func (m *EventReserve) XXX_DiscardUnknown() {
	xxx_messageInfo_EventReserve.DiscardUnknown(m)
}

var xxx_messageInfo_EventReserve proto.InternalMessageInfo

func (m *EventReserve) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *EventReserve) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *EventReserve) GetResolve() string {
	if m != nil {
		return m.Resolve
	}
	return ""
}

func (m *EventReserve) GetAmount() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Amount
	}
	return nil
}

func init() {
	proto.RegisterType((*EventReserve)(nil), "cosmos.ns_auction.v1.EventReserve")
}

func init() { proto.RegisterFile("cosmos/ns_auction/v1/event.proto", fileDescriptor_4f524370d84f673a) }

var fileDescriptor_4f524370d84f673a = []byte{
	// 348 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x91, 0x3f, 0x4e, 0xc3, 0x30,
	0x14, 0xc6, 0x13, 0x5a, 0x8a, 0x08, 0x2c, 0x44, 0x95, 0x48, 0x3b, 0xa4, 0x15, 0x53, 0x85, 0x88,
	0xad, 0x14, 0x71, 0x00, 0x8a, 0xe0, 0x00, 0x61, 0x63, 0xa9, 0xf2, 0xc7, 0x4a, 0xa3, 0xd6, 0x7e,
	0x95, 0x9f, 0x13, 0xe0, 0x16, 0x1c, 0x03, 0x31, 0x31, 0x70, 0x88, 0x8e, 0x15, 0x13, 0x13, 0xa0,
	0x76, 0x60, 0xe5, 0x08, 0x28, 0x89, 0x2b, 0x06, 0x06, 0x96, 0xe4, 0xf9, 0x7b, 0xbf, 0xf7, 0xc9,
	0xdf, 0xb3, 0xd5, 0x8f, 0x01, 0x39, 0x20, 0x15, 0x38, 0x0e, 0xf3, 0x58, 0x65, 0x20, 0x68, 0xe1,
	0x53, 0x56, 0x30, 0xa1, 0xc8, 0x5c, 0x82, 0x02, 0xbb, 0x5d, 0x13, 0xe4, 0x97, 0x20, 0x85, 0xdf,
	0xed, 0xd4, 0xea, 0xb8, 0x62, 0xa8, 0x46, 0xaa, 0x43, 0xf7, 0x50, 0x5b, 0x72, 0x4c, 0x4b, 0x2f,
	0x8e, 0xa9, 0x6e, 0xb4, 0x53, 0x48, 0xa1, 0x1e, 0x28, 0x2b, 0xad, 0xba, 0x1a, 0x8f, 0x42, 0x64,
	0xb4, 0xf0, 0x23, 0xa6, 0x42, 0x9f, 0xc6, 0x90, 0x09, 0xdd, 0x3f, 0x08, 0x79, 0x26, 0x80, 0x56,
	0xdf, 0x5a, 0x3a, 0xfa, 0x36, 0xad, 0xfd, 0xcb, 0xf2, 0x8a, 0x01, 0x43, 0x26, 0x0b, 0x66, 0xdb,
	0x56, 0x53, 0x84, 0x9c, 0x39, 0x66, 0xdf, 0x1c, 0xec, 0x06, 0x55, 0x6d, 0x13, 0x6b, 0x1b, 0x6e,
	0x05, 0x93, 0xce, 0x56, 0x29, 0x8e, 0x9c, 0xd7, 0x17, 0x6f, 0x13, 0xe5, 0x3c, 0x49, 0x24, 0x43,
	0xbc, 0x56, 0x32, 0x13, 0x69, 0x50, 0x63, 0xf6, 0xd0, 0xda, 0x91, 0x0c, 0x61, 0x56, 0x30, 0xa7,
	0xf1, 0xcf, 0xc4, 0x06, 0xb4, 0x27, 0x56, 0x2b, 0xe4, 0x90, 0x0b, 0xe5, 0x34, 0xfb, 0x8d, 0xc1,
	0xde, 0xb0, 0x43, 0x34, 0x5f, 0x86, 0x21, 0x3a, 0x0c, 0xb9, 0x80, 0x4c, 0x8c, 0xce, 0x16, 0xef,
	0x3d, 0xe3, 0xe9, 0xa3, 0x37, 0x48, 0x33, 0x35, 0xc9, 0x23, 0x12, 0x03, 0xd7, 0x6b, 0xd3, 0x3f,
	0x0f, 0x93, 0x29, 0x55, 0xf7, 0x73, 0x86, 0xd5, 0x00, 0x3e, 0x7e, 0x3d, 0x1f, 0x9b, 0x81, 0xf6,
	0x1f, 0x5d, 0x2d, 0x56, 0xae, 0xb9, 0x5c, 0xb9, 0xe6, 0xe7, 0xca, 0x35, 0x1f, 0xd6, 0xae, 0xb1,
	0x5c, 0xbb, 0xc6, 0xdb, 0xda, 0x35, 0x6e, 0x4e, 0xfe, 0x1a, 0x62, 0x32, 0xf5, 0x54, 0xae, 0x40,
	0x66, 0xe1, 0x0c, 0xe9, 0x1d, 0x15, 0xe8, 0xe9, 0xa7, 0x8b, 0x5a, 0xd5, 0x06, 0x4f, 0x7f, 0x02,
	0x00, 0x00, 0xff, 0xff, 0xc2, 0xb1, 0xb6, 0xec, 0xf8, 0x01, 0x00, 0x00,
}

func (m *EventReserve) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventReserve) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventReserve) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		for iNdEx := len(m.Amount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Resolve) > 0 {
		i -= len(m.Resolve)
		copy(dAtA[i:], m.Resolve)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Resolve)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvent(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvent(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventReserve) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Resolve)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if len(m.Amount) > 0 {
		for _, e := range m.Amount {
			l = e.Size()
			n += 1 + l + sovEvent(uint64(l))
		}
	}
	return n
}

func sovEvent(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvent(x uint64) (n int) {
	return sovEvent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventReserve) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventReserve: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventReserve: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resolve", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Resolve = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount, types.Coin{})
			if err := m.Amount[len(m.Amount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvent
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvent
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvent
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvent        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvent          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvent = fmt.Errorf("proto: unexpected end of group")
)
