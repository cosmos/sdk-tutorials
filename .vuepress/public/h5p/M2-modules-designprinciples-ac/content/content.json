{"panels":[{"content":{"params":{"text":"<p>SDK applications are almost always composed of multiple modules. This means developers need to carefully consider the integration of their module not only with the core of the Cosmos SDK, but also with other modules. The former is achieved by following <a href=\"https://github.com/cosmos/cosmos-sdk/blob/master/docs/building-modules/intro.md#main-components-of-sdk-modules\" rel=\"nofollow noreferrer noopener\" target=\"_blank\">standard design patterns</a>, while the latter is achieved by properly exposing the store(s) of the module via the keeper.</p>\n"},"library":"H5P.AdvancedText 1.1","subContentId":"9f278790-d983-4180-be46-eaf8bdd236b9","metadata":{"contentType":"Text","license":"U","title":"Unbenannt: Text","authors":[],"changes":[]}},"title":"Composability"},{"content":{"params":{"text":"<p>A direct consequence of the composability feature is that modules should be specialized. Developers should carefully establish the scope of their module and not batch multiple functionalities into the same module. This separation of concerns enables modules to be re-used in other projects and improves the upgradability of the application. Specialization also plays an important role in the object-capability model of the Cosmos SDK.</p>\n"},"library":"H5P.AdvancedText 1.1","subContentId":"72cf578c-7c50-4964-a529-e04fca10d0b7","metadata":{"contentType":"Text","license":"U","title":"Unbenannt: Text","authors":[],"changes":[]}},"title":"Specialization"},{"content":{"params":{"text":"<p>Most modules need to read and/or write to the store(s) of other modules. However, in an open-source environment, it is possible for some modules to be malicious. That is why module developers need to carefully think not only about how their module interacts with other modules, but also about how to give access to the module's store(s). The Cosmos SDK takes a capabilities-oriented approach to inter-module security. This means that each store defined by a module is accessed by a runtime key, which is held by the module's keeper. This keeper defines how to access the store(s) and under what conditions. Access to the module's store(s) is done by passing a reference to the module's keeper.</p>\n"},"library":"H5P.AdvancedText 1.1","subContentId":"acdb56d8-a793-49ef-9919-a88d38fe9dc4","metadata":{"contentType":"Text","license":"U","title":"Unbenannt: Text","authors":[],"changes":[]}},"title":"Capabilities"}],"hTag":"h2"}