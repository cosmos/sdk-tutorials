syntax = "proto3";
package cosmonaut.voter.voter;

import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
// this line is used by starport scaffolding # 1
import "voter/vote.proto";
import "voter/poll.proto";

option go_package = "github.com/cosmonaut/voter/x/voter/types";

// Query defines the gRPC querier service.
service Query {
    // this line is used by starport scaffolding # 2

	// Queries a vote by id.
	rpc Vote(QueryGetVoteRequest) returns (QueryGetVoteResponse) {
		option (google.api.http).get = "/cosmonaut/voter/voter/vote/{id}";
	}

	// Queries a list of vote items.
	rpc VoteAll(QueryAllVoteRequest) returns (QueryAllVoteResponse) {
		option (google.api.http).get = "/cosmonaut/voter/voter/vote";
	}


	// Queries a poll by id.
	rpc Poll(QueryGetPollRequest) returns (QueryGetPollResponse) {
		option (google.api.http).get = "/cosmonaut/voter/voter/poll/{id}";
	}

	// Queries a list of poll items.
	rpc PollAll(QueryAllPollRequest) returns (QueryAllPollResponse) {
		option (google.api.http).get = "/cosmonaut/voter/voter/poll";
	}

}

// this line is used by starport scaffolding # 3
message QueryGetVoteRequest {
	uint64 id = 1;
}

message QueryGetVoteResponse {
	Vote Vote = 1;
}

message QueryAllVoteRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllVoteResponse {
	repeated Vote Vote = 1;
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}
message QueryGetPollRequest {
	uint64 id = 1;
}

message QueryGetPollResponse {
	Poll Poll = 1;
}

message QueryAllPollRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllPollResponse {
	repeated Poll Poll = 1;
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}
